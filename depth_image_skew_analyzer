#!/usr/bin/env python

import ipdb
import rospy
import threading
import cv2
import numpy
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image as ImageMsg
from std_msgs.msg import Float32
from astra_camera.srv import GetSerial

class DepthImageSkewAnalyzer(object):
    def __init__(self):
        self.temp_lock = threading.Lock()
        self.temperature = 0.0
        self.start_time = rospy.Time.now()

        self.bridge = CvBridge()
        self.depth_image_sub = rospy.Subscriber(
                "/camera/depth/image_raw", ImageMsg, self.depth_image_cb)
        self.temperature_sub = rospy.Subscriber(
                "/camera/temperature", Float32, self.temperature_cb)
        print "Camera serial: ", self.get_serial()



    def temperature_cb(self, msg):
        """ Record the camera temperature into a member variable.

        Because assignment is not atomic in Python, and each ROS callback
        runs on a separate thread, need to grab a mutex anytime this 
        member variable is accessed
        """
        with self.temp_lock:
            self.temperature = msg.data;

    def depth_image_cb(self, msg):
        with self.temp_lock:
            temperature = self.temperature

        elapsed = (rospy.Time.now() - self.start_time).to_sec()

        # Convert ROS Image message to an OpenCV image object
        cv_image = self.bridge.imgmsg_to_cv2(msg, desired_encoding="16UC1")
        (rows, cols) = cv_image.shape

        # Extract the center horizontal scanline into a 1-dimensional array
        center_row = cv_image[rows/2:rows/2+1][0]

        # Create a numpy array containing 0..cols-1
        x_values = numpy.arange(cols)

        # Find least-squares best fit straight line
        (slope, y_intercept) = numpy.polyfit(x_values, center_row, 1)

        print "Time: %.2f Temp: %.2f Slope: %.4f" % (
                elapsed, temperature, slope)

    def get_serial(self):
        rospy.wait_for_service('/camera/get_serial')
        astra_get_serial = rospy.ServiceProxy('/camera/get_serial', GetSerial)
        return astra_get_serial().serial

if __name__ == '__main__':
    rospy.init_node("depth_image_skew_analyzer")
    analyzer = DepthImageSkewAnalyzer()
    rospy.spin()
